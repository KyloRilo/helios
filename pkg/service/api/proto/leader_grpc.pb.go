// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: pkg/service/api/proto/leader.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Docker_BuildImage_FullMethodName      = "/proto.Docker/BuildImage"
	Docker_CreateContainer_FullMethodName = "/proto.Docker/CreateContainer"
	Docker_StartContainer_FullMethodName  = "/proto.Docker/StartContainer"
)

// DockerClient is the client API for Docker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DockerClient interface {
	BuildImage(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (*BuildResp, error)
	CreateContainer(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error)
	StartContainer(ctx context.Context, in *StartReq, opts ...grpc.CallOption) (*StartResp, error)
}

type dockerClient struct {
	cc grpc.ClientConnInterface
}

func NewDockerClient(cc grpc.ClientConnInterface) DockerClient {
	return &dockerClient{cc}
}

func (c *dockerClient) BuildImage(ctx context.Context, in *BuildReq, opts ...grpc.CallOption) (*BuildResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BuildResp)
	err := c.cc.Invoke(ctx, Docker_BuildImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerClient) CreateContainer(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Docker_CreateContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerClient) StartContainer(ctx context.Context, in *StartReq, opts ...grpc.CallOption) (*StartResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartResp)
	err := c.cc.Invoke(ctx, Docker_StartContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DockerServer is the server API for Docker service.
// All implementations must embed UnimplementedDockerServer
// for forward compatibility.
type DockerServer interface {
	BuildImage(context.Context, *BuildReq) (*BuildResp, error)
	CreateContainer(context.Context, *CreateReq) (*CreateResp, error)
	StartContainer(context.Context, *StartReq) (*StartResp, error)
	mustEmbedUnimplementedDockerServer()
}

// UnimplementedDockerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDockerServer struct{}

func (UnimplementedDockerServer) BuildImage(context.Context, *BuildReq) (*BuildResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildImage not implemented")
}
func (UnimplementedDockerServer) CreateContainer(context.Context, *CreateReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContainer not implemented")
}
func (UnimplementedDockerServer) StartContainer(context.Context, *StartReq) (*StartResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartContainer not implemented")
}
func (UnimplementedDockerServer) mustEmbedUnimplementedDockerServer() {}
func (UnimplementedDockerServer) testEmbeddedByValue()                {}

// UnsafeDockerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DockerServer will
// result in compilation errors.
type UnsafeDockerServer interface {
	mustEmbedUnimplementedDockerServer()
}

func RegisterDockerServer(s grpc.ServiceRegistrar, srv DockerServer) {
	// If the following call pancis, it indicates UnimplementedDockerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Docker_ServiceDesc, srv)
}

func _Docker_BuildImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServer).BuildImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Docker_BuildImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServer).BuildImage(ctx, req.(*BuildReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docker_CreateContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServer).CreateContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Docker_CreateContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServer).CreateContainer(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docker_StartContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServer).StartContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Docker_StartContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServer).StartContainer(ctx, req.(*StartReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Docker_ServiceDesc is the grpc.ServiceDesc for Docker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Docker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Docker",
	HandlerType: (*DockerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildImage",
			Handler:    _Docker_BuildImage_Handler,
		},
		{
			MethodName: "CreateContainer",
			Handler:    _Docker_CreateContainer_Handler,
		},
		{
			MethodName: "StartContainer",
			Handler:    _Docker_StartContainer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/service/api/proto/leader.proto",
}
